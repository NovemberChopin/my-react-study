const BlogModel = require('./blog')
const BlogCataModel = require('./blogcata')

const blogData = {
"content": "<div class=\"markdown-text\"><p><img src=\"//static.cnodejs.org/FmrUNUrOP4SEOWrAMXQScFmOYqfR\" alt=\"js_closure.png\">\n<strong>摘要：</strong> 理解JS闭包。</p>\n<ul>\n<li>原文：<a href=\"https://segmentfault.com/a/1190000017136436\">我从来不理解JavaScript闭包，直到有人这样向我解释它…</a></li>\n<li>作者：<a href=\"https://segmentfault.com/a/1190000017794020\">前端小智</a></li>\n</ul>\n<p><strong><a href=\"https://www.fundebug.com/\">Fundebug</a>经授权转载，版权归原作者所有。</strong></p>\n<p>正如标题所述，JavaScript闭包对我来说一直有点神秘,看过很多闭包的文章，在工作使用过闭包，有时甚至在项目中使用闭包，但我确实是这是在使用闭包的知识。</p>\n<p>最近看国外的一些文章，终于，有人用于一种让我明白方式对闭包进行了解释，我将在本文中尝试使用这种方法来解释闭包。</p>\n<h3>准备</h3>\n<p>在理解闭包之前，有个重要的概念需要先了解一下，就是 js 执行上下文。</p>\n<p>这篇<a href=\"http://davidshariff.com/blog/what-is-the-execution-context-in-javascript/\">文章</a>是执行上下文 很不错的入门教程，文章中提到：</p>\n<blockquote>\n<p>当代码在JavaScript中运行时，执行代码的环境非常重要，并将概括为以下几点：</p>\n<p><strong>全局代码</strong>——第一次执行代码的默认环境。</p>\n<p><strong>函数代码</strong>——当执行流进入函数体时。</p>\n<p>(…) —— 我们当作 执行上下文 是当前代码执行的一个环境与范围。</p>\n</blockquote>\n<p>换句话说，当我们启动程序时，我们从全局执行上下文中开始。一些变量是在全局执行上下文中声明的。我们称之为全局变量。当程序调用一个函数时，会发生什么?</p>\n<p>以下几个步骤：</p>\n<ul>\n<li>JavaScript创建一个新的执行上下文，我们叫作本地执行上下文。</li>\n<li>这个本地执行上下文将有它自己的一组变量，这些变量将是这个执行上下文的本地变量。</li>\n<li>新的执行上下文被推到到执行堆栈中。可以将执行堆栈看作是一种保存程序在其执行中的位置的容器。</li>\n</ul>\n<p>函数什么时候结束?当它遇到一个return语句或一个结束括号}。</p>\n<p>当一个函数结束时，会发生以下情况:</p>\n<ul>\n<li>这个本地执行上下文从执行堆栈中弹出。</li>\n<li>函数将返回值返回调用上下文。调用上下文是调用这个本地的执行上下文，它可以是全局执行上下文，也可以是另外一个本地的执行上下文。这取决于调用执行上下文来处理此时的返回值，返回的值可以是一个对象、一个数组、一个函数、一个布尔值等等，如果函数没有return语句，则返回undefined。</li>\n<li>这个本地执行上下文被销毁，销毁是很重要，这个本地执行上下文中声明的所有变量都将被删除，不在有变量，这个就是为什么 称为本地执行上下文中自有的变量。</li>\n</ul>\n<h4>基础的例子</h4>\n<p>在讨论闭包之前，让我们看一下下面的代码：</p>\n<pre class=\"prettyprint language-javascript\"><code>1: let a = 3\n2: function addTwo(x) {\n3:   let ret = x + 2\n4:   return ret\n5: }\n6: let b = addTwo(a)\n7: console.log(b)\n</code></pre><p>为了理解JavaScript引擎是如何工作的，让我们详细分析一下：</p>\n<ul>\n<li>在第1行，我们在全局执行上下文中声明了一个新变量a，并将赋值为3。</li>\n<li>接下来就变得棘手了，第2行到第5行实际上是在一起的。这里发生了什么? 我们在全局执行上下文中声明了一个名为<code>addTwo</code>的新变量,我们给它分配了什么?一个函数定义。两个括号{}之间的任何内容都被分配给<code>addTwo</code>，函数内部的代码没有被求值，没有被执行，只是存储在一个变量中以备将来使用。</li>\n<li>现在我们在第6行。它看起来很简单，但是这里有很多东西需要拆开分析。首先，我们在全局执行上下文中声明一个新变量，并将其标记为<code>b</code>，变量一经声明，其值即为undefined。</li>\n<li>接下来，仍然在第6行，我们看到一个赋值操作符。我们准备给变量<code>b</code>赋一个新值，接下来我们看到一个函数被调用。当您看到一个变量后面跟着一个圆括号(…)时，这就是调用函数的信号，接着，每个函数都返回一些东西(值、对象或 undefined)，无论从函数返回什么，都将赋值给变量<code>b</code>。</li>\n<li>但是首先我们需要调用标记为<code>addTwo</code>的函数。JavaScript将在其全局执行上下文内存中查找名为<code>addTwo</code>的变量。噢，它找到了一个，它是在步骤2(或第2 - 5行)中定义的。变量<code>add2</code>包含一个函数定义。注意，变量<code>a</code>作为参数传递给函数。JavaScript在全局执行上下文内存中搜索变量<code>a</code>，找到它，发现它的值是3，并将数字3作为参数传递给函数，准备好执行函数。</li>\n<li>现在执行上下文将切换,创建了一个新的本地执行上下文，我们将其命名为“addTwo执行上下文”，执行上下文被推送到调用堆栈上。在addTwo执行上下文中，我们要做的第一件事是什么?</li>\n<li>你可能会说，“在addTwo执行上下文中声明了一个新的变量ret”，这是不对的。正确的答案是，我们需要先看函数的参数。在addTwo执行上下文中声明一个新的变量`x``，因为值3是作为参数传递的，所以变量x被赋值为3。</li>\n<li>下一步是:在addTwo执行上下文中声明一个新的变量<code>ret</code>。它的值被设置为 undefined(第三行)。</li>\n<li>仍然是第3行，需要执行一个相加操作。首先我们需要<code>x</code>的值，JavaScript会寻找一个变量<code>x</code>，它会首先在<code>addTwo</code>执行上下文中寻找，找到了一个值为3。第二个操作数是数字2。两个相加结果为5就被分配给变量<code>ret</code>。</li>\n<li>第4行，我们返回变量<code>ret</code>的内容，在addTwo执行上下文中查找，找到值为5，返回，函数结束。</li>\n<li>第4 - 5行，函数结束。addTwo执行上下文被销毁，变量<code>x</code>和<code>ret</code>被消去了，它们已经不存在了。addTwo执行上下文从调用堆栈中弹出，返回值返回给调用上下文，在这种情况下，调用上下文是全局执行上下文，因为函数<code>addTw</code>o是从全局执行上下文调用的。</li>\n<li>现在我们继续第4步的内容，返回值5被分配给变量<code>b</code>，程序仍然在第6行。</li>\n<li>在第7行，<code>b</code>的值 5 被打印到控制台了。</li>\n</ul>\n<p>对于一个非常简单的程序，这是一个非常冗长的解释，我们甚至还没有涉及闭包。但肯定会涉及的，不过首先我们得绕一两个弯。</p>\n<h3>词法作用域（Lexical scope）</h3>\n<p>我们需要理解词法作用域的一些知识。请看下面的例子：</p>\n<pre class=\"prettyprint language-javascript\"><code>1: let val1 = 2\n2: function multiplyThis(n) {\n3:   let ret = n * val1\n4:   return ret\n5: }\n6: let multiplied = multiplyThis(6)\n7: console.log(&#x27;example of scope:&#x27;, multiplied)\n</code></pre><p>这里想说明，我们在函数执行上下文中有变量，在全局执行上下文中有变量。JavaScript的一个复杂之处在于它如何查找变量，如果在函数执行上下文中找不到变量，它将在调用上下文中寻找它，如果在它的调用上下文中没有找到，就一直往上一级，直到它在全局执行上下文中查找为止。(如果最后找不到，它就是 undefined)。</p>\n<p>下面列出向个步骤来解释一下（如果你已经熟悉了，请跳过）：</p>\n<ul>\n<li>在全局执行上下文中声明一个新的变量<code>val1</code>，并将其赋值为2。</li>\n<li>行2 - 5，声明一个新的变量 <code>multiplyThis</code>，并给它分配一个函数定义。</li>\n<li>第六行，声明一个在全局执行上下文 <code>multiplied</code> 新变量。</li>\n<li>从全局执行上下文内存中查找变量<code>multiplyThis</code>，并将其作为函数执行，传递数字 6 作为参数。</li>\n<li>新函数调用(创建新执行上下文），创建一个新的 <code>multiplyThis</code> 函数执行上下文。</li>\n<li>在 <code>multiplyThis</code> 执行上下文中，声明一个变量n并将其赋值为6</li>\n<li>第 3 行。在<code>multiplyThis</code>执行上下文中，声明一个变量<code>ret</code>。</li>\n<li>继续第 3 行。对两个操作数 n 和 val1 进行乘法运算.在<code>multiplyThis</code>执行上下文中查找变量 <code>n</code>。我们在步骤6中声明了它,它的内容是数字6。在<code>multiplyThis</code>执行上下文中查找变量<code>val1</code>。<code>multiplyThis</code>执行上下文没有一个标记为 val1 的变量。我们向调用上下文查找，调用上下文是全局执行上下文，在全局执行上下文中寻找 <code>val1</code>。哦，是的、在那儿，它在步骤1中定义，数值是2。</li>\n<li>继续第 3 行。将两个操作数相乘并将其赋值给<code>ret</code>变量，6 * 2 = 12，ret现在值为 12。</li>\n<li>返回<code>ret</code>变量，销毁<code>multiplyThis</code>执行上下文及其变量 <code>ret</code> 和 <code>n</code> 。变量 <code>val1</code> 没有被销毁，因为它是全局执行上下文的一部分。</li>\n<li>回到第6行。在调用上下文中，数字 12 赋值给 <code>multiplied</code> 的变量。</li>\n<li>最后在第7行，我们在控制台中打印 <code>multiplied</code> 变量的值</li>\n</ul>\n<p>在这个例子中，我们需要记住一个函数可以访问在它的调用上下文中定义的变量，这个就是<strong>词法作用域（Lexical scope）</strong>。</p>\n<h3>返回函数的函数</h3>\n<p>在第一个例子中，函数<code>addTwo</code>返回一个数字。请记住，函数可以返回任何东西。让我们看一个返回函数的函数示例，因为这对于理解闭包非常重要。看粟子：</p>\n<pre class=\"prettyprint language-javascript\"><code> 1: let val = 7\n 2: function createAdder() {\n 3:   function addNumbers(a, b) {\n 4:     let ret = a + b\n 5:     return ret\n 6:   }\n 7:   return addNumbers\n 8: }\n 9: let adder = createAdder()\n10: let sum = adder(val, 8)\n11: console.log(&#x27;example of function returning a function: &#x27;, sum)\n</code></pre><p>让我们回到分步分解：</p>\n<ul>\n<li>第一行。我们在全局执行上下文中声明一个变量<code>val</code>并赋值为 7。</li>\n<li>行2 - 8。我们在全局执行上下文中声明了一个名为 <code>createAdder</code> 的变量，并为其分配了一个函数定义。第3至7行描述了上述函数定义，和以前一样，在这一点上，我们没有直接讨论这个函数。我们只是将函数定义存储到那个变量(<code>createAdder</code>)中。</li>\n<li>第9行。我们在全局执行上下文中声明了一个名为 <code>adder</code> 的新变量，暂时，值为 undefined。</li>\n<li>第9行。我们看到括号()，我们需要执行或调用一个函数，查找全局执行上下文的内存并查找名为<code>createAdder</code> 的变量，它是在步骤2中创建的。好吧，我们调用它。</li>\n<li>调用函数时，执行到第2行。创建一个新的<code>createAdder</code>执行上下文。我们可以在<code>createAdder</code>的执行上下文中创建自有变量。js 引擎将<code>createAdder</code>的上下文添加到调用堆栈。这个函数没有参数，让我们直接跳到它的主体部分.</li>\n<li>第 3 - 6 行。我们有一个新的函数声明，我们在<code>createAdder</code>执行上下文中创建一个变量addNumbers。这很重要，<code>addnumber</code>只存在于<code>createAdder</code>执行上下文中。我们将函数定义存储在名为 `addNumbers`` 的自有变量中。</li>\n<li>在第7行，我们返回变量<code>addNumbers</code>的内容。js引擎查找一个名为<code>addNumbers</code>的变量并找到它，这是一个函数定义。好的，函数可以返回任何东西，包括函数定义。我们返<code>addNumbers</code>的定义。第4行和第5行括号之间的内容构成该函数定义。</li>\n<li>返回时，<code>createAdder</code>执行上下文将被销毁。<code>addNumbers</code> 变量不再存在。但<code>addNumbers</code>函数定义仍然存在，因为它返回并赋值给了adder 变量。</li>\n<li>第10行。我们在全局执行上下文中定义了一个新的变量 <code>sum</code>，先负值为 undefined;</li>\n<li>接下来我们需要执行一个函数。哪个函数?是名为<code>adder</code>变量中定义的函数。我们在全局执行上下文中查找它，果然找到了它，这个函数有两个参数。</li>\n<li>让我们查找这两个参数，第一个是我们在步骤1中定义的变量<code>val</code>，它表示数字7，第二个是数字8。</li>\n<li>现在我们要执行这个函数，函数定义概述在第3-5行，因为这个函数是匿名，为了方便理解，我们暂且叫它<code>adder</code>吧。这时创建一个<code>adder</code>函数执行上下文，在<code>adder</code>执行上下文中创建了两个新变量 <code>a</code> 和 <code>b</code>。它们分别被赋值为 7 和 8，因为这些是我们在上一步传递给函数的参数。</li>\n<li>第 4 行。在<code>adder</code>执行上下文中声明了一个名为<code>ret</code>的新变量,</li>\n<li>第 4 行。将变量<code>a</code>的内容和变量<code>b</code>的内容相加得15并赋给ret变量。</li>\n<li><code>ret</code>变量从该函数返回。这个匿名函数执行上下文被销毁，从调用堆栈中删除，变量<code>a</code>、<code>b</code>和<code>ret</code>不再存在。</li>\n<li>返回值被分配给我们在步骤9中定义的<code>sum</code>变量。</li>\n<li>我们将<code>sum</code>的值打印到控制台。</li>\n<li>如预期，控制台将打印15。我们在这里确实经历了很多困难，我想在这里说明几点。首先，函数定义可以存储在变量中，函数定义在程序调用之前是不可见的。其次，每次调用函数时，都会(临时)创建一个本地执行上下文。当函数完成时，执行上下文将消失。函数在遇到return或右括号}时执行完成。</li>\n</ul>\n<p><strong>码部署后可能存在的BUG没法实时知道，事后为了解决这些BUG，花了大量的时间进行log 调试，这边顺便给大家推荐一个好用的BUG监控工具 <a href=\"https://www.fundebug.com/?utm_source=xiaozhi\">Fundebug</a>。</strong></p>\n<h3>最后,一个闭包</h3>\n<p>看看下面的代码，并试着弄清楚会发生什么。</p>\n<pre class=\"prettyprint language-javascript\"><code> 1: function createCounter() {\n 2:   let counter = 0\n 3:   const myFunction = function() {\n 4:     counter = counter + 1\n 5:     return counter\n 6:   }\n 7:   return myFunction\n 8: }\n 9: const increment = createCounter()\n10: const c1 = increment()\n11: const c2 = increment()\n12: const c3 = increment()\n13: console.log(&#x27;example increment&#x27;, c1, c2, c3)\n</code></pre><p>现在，我们已经从前两个示例中掌握了它的诀窍，让我们按照预期的方式快速执行它：</p>\n<ul>\n<li>行1 - 8。我们在全局执行上下文中创建了一个新的变量<code>createCounter</code>，并赋值了一个的函数定义。</li>\n<li>第9行。我们在全局执行上下文中声明了一个名为<code>increment</code>的新变量。</li>\n<li>第9行。我们需要调用<code>createCounter</code>函数并将其返回值赋给<code>increment</code>变量。</li>\n<li>行1 - 8。调用函数，创建新的本地执行上下文。</li>\n<li>第2行。在本地执行上下文中，声明一个名为<code>counter</code>的新变量并赋值为 0;</li>\n<li>行3 - 6。声明一个名为<code>myFunction</code>的新变量，变量在本地执行上下文中声明,变量的内容是为第4行和第5行所定义。</li>\n<li>第7行。返回<code>myFunction</code>变量的内容，删除本地执行上下文。变量<code>myFunction</code>和<code>counter</code>不再存在。此时控制权回到了调用上下文。</li>\n<li>第9行。在调用上下文(全局执行上下文)中，<code>createCounter</code>返回的值赋给了<code>increment</code>，变量<code>increment</code>现在包含一个函数定义内容为<code>createCounter</code>返回的函数。它不再标记为<code>myFunction``，但它的定义是相同的。在全局上下文中，它是的标记为</code>labeledincrement`。</li>\n<li>第10行。声明一个新变量(c1)。</li>\n<li>继续第10行。查找<code>increment</code>变量，它是一个函数并调用它。它包含前面返回的函数定义，如第4-5行所定义的。</li>\n<li>创建一个新的执行上下文。没有参数。开始执行函数。</li>\n<li>第4行。counter=counter + 1。在本地执行上下文中查找<code>counter</code>变量。我们只是创建了那个上下文，从来没有声明任何局部变量。让我们看看全局执行上下文。这里也没有<code>counter</code>变量。Javascript会将其计算为counter = undefined + 1，声明一个标记为<code>counter</code>的新局部变量，并将其赋值为number 1，因为undefined被当作值为 0。</li>\n<li>第5行。我们变量<code>counter</code>的值(1)，我们销毁本地执行上下文和<code>counter</code>变量。</li>\n<li>回到第10行。返回值(1)被赋给c1。</li>\n<li>第11行。重复步骤10-14，c2也被赋值为1。</li>\n<li>第12行。重复步骤10-14，c3也被赋值为1。</li>\n<li>第13行。我们打印变量c1 c2和c3的内容。</li>\n</ul>\n<p>你自己试试，看看会发生什么。你会将注意到，它并不像从我上面的解释中所期望的那样记录1,1,1。而是记录1,2,3。这个是为什么?</p>\n<p>不知怎么滴，<code>increment</code>函数记住了那个<code>cunter</code>的值。这是怎么回事?</p>\n<p><code>counter</code>是全局执行上下文的一部分吗?尝试 console.log(counter)，得到undefined的结果,显然不是这样的。</p>\n<p>也许，当你调用<code>increment</code>时，它会以某种方式返回它创建的函数(createCounter)?这怎么可能呢?变量<code>increment</code>包含函数定义，而不是函数的来源，显然也不是这样的。</p>\n<p>所以一定有另一种机制。<strong>闭包</strong>，我们终于找到了，丢失的那块。</p>\n<p>它是这样工作的，无论何时声明新函数并将其赋值给变量，都要存储函数定义和闭包。闭包包含在函数创建时作用域中的所有变量，它类似于背包。函数定义附带一个小背包，它的包中存储了函数定义创建时作用域中的所有变量。</p>\n<p>所以我们上面的解释都是错的，让我们再试一次，但是这次是正确的。</p>\n<pre class=\"prettyprint language-javascript\"><code> 1: function createCounter() {\n 2:   let counter = 0\n 3:   const myFunction = function() {\n 4:     counter = counter + 1\n 5:     return counter\n 6:   }\n 7:   return myFunction\n 8: }\n 9: const increment = createCounter()\n10: const c1 = increment()\n11: const c2 = increment()\n12: const c3 = increment()\n13: console.log(&#x27;example increment&#x27;, c1, c2, c3)\n</code></pre><ul>\n<li>同上， 行1 - 8。我们在全局执行上下文中创建了一个新的变量createCounter，它得到了指定的函数定义。</li>\n<li>同上，第9行。我们在全局执行上下文中声明了一个名为<code>increment</code>的新变量。</li>\n<li>同上，第9行。我们需要调用<code>createCounter</code>函数并将其返回值赋给<code>increment</code>变量。</li>\n<li>同上，行1 - 8。调用函数，创建新的本地执行上下文。</li>\n<li>同上，第2行。在本地执行上下文中，声明一个名为<code>counter</code>的新变量并赋值为 0 。</li>\n<li>行3 - 6。声明一个名为<code>myFunction</code>的新变量，变量在本地执行上下文中声明,变量的内容是另一个函数定义。如第4行和第5行所定义，现在我们还创建了一个闭包，并将其作为函数定义的一部分。闭包包含作用域中的变量，在本例中是变量<code>counter</code>(值为0)。</li>\n<li>第7行。返回<code>myFunction</code>变量的内容,删除本地执行上下文。<code>myFunction</code>和<code>counter</code>不再存在。控制权交给了调用上下文，我们返回函数定义和它的闭包，闭包中包含了创建它时在作用域内的变量。</li>\n<li>第9行。在调用上下文(全局执行上下文)中，<code>createCounter</code>返回的值被指定为<code>increment</code>，变量<code>increment</code>现在包含一个函数定义(和闭包),由createCounter返回的函数定义,它不再标记为<code>myFunction</code>，但它的定义是相同的,在全局上下文中，称为<code>increment</code>。</li>\n<li>第10行。声明一个新变量(c1)。</li>\n<li>继续第10行。查找变量<code>increment</code>，它是一个函数，调用它。它包含前面返回的函数定义,如第4-5行所定义的。(它还有一个带有变量的闭包)。</li>\n<li>创建一个新的执行上下文，没有参数，开始执行函数。</li>\n<li>第4行。counter = counter + 1，寻找变量 <code>counter</code>，在查找本地或全局执行上下文之前，让我们检查一下闭包，瞧，闭包包含一个名为<code>counter</code>的变量，其值为0。在第4行表达式之后，它的值被设置为1。它再次被储存在闭包里，闭包现在包含值为1的变量 <code>counter</code>。</li>\n<li>第5行。我们返回<code>counter的值</code>，销毁本地执行上下文。</li>\n<li>回到第10行。返回值(1)被赋给变量<code>c1</code>。</li>\n<li>第11行。我们重复步骤10-14。这一次，在闭包中此时变量<code>counter</code>的值是1。它在第12步设置的，它的值被递增并以2的形式存储在递增函数的闭包中,c2被赋值为2。</li>\n<li>第12行。重复步骤10-14,<code>c3</code>被赋值为3。</li>\n<li>第13行。我们打印变量c1 c2和c3的值。</li>\n</ul>\n<p>您可能会问，是否有任何函数具有闭包，甚至是在全局范围内创建的函数?答案是肯定的。在全局作用域中创建的函数创建闭包，但是由于这些函数是在全局作用域中创建的，所以它们可以访问全局作用域中的所有变量，闭包的概念并不重要。</p>\n<p>当函数返回函数时，闭包的概念就变得更加重要了。返回的函数可以访问不属于全局作用域的变量，但它们仅存在于其闭包中。</p>\n<h3>闭包不是那么简单</h3>\n<p>有时候闭包在你甚至没有注意到它的时候就会出现，你可能已经看到了我们称为部分应用程序的示例，如下面的代码所示：</p>\n<pre class=\"prettyprint language-javascript\"><code>let c = 4\nconst addX = x =&gt; n =&gt; n + x\nconst addThree = addX(3)\nlet d = addThree(c)\nconsole.log(&#x27;example partial application&#x27;, d)\n</code></pre><p>如果箭头函数让您感到困惑，下面是同样效果：</p>\n<pre class=\"prettyprint language-javascript\"><code>let c = 4\nfunction addX(x) {\n  return function(n) {\n     return n + x\n  }\n}\nconst addThree = addX(3)\nlet d = addThree(c)\nconsole.log(&#x27;example partial application&#x27;, d)\n</code></pre><p>我们声明一个能用加法函数<code>addX</code>，它接受一个参数(x)并返回另一个函数。返回的函数还接受一个参数并将其添加到变量<code>x</code>中。</p>\n<p>变量<code>x</code>是闭包的一部分，当变量<code>addThree</code>在本地上下文中声明时，它被分配一个函数定义和一个闭包，闭包包含变量x。</p>\n<p>所以当<code>addThree</code>被调用并执行时，它可以从闭包中访问变量<code>x</code>以及为参数传递变量<code>n</code>并返回两者的和 7。</p>\n<h3>总结</h3>\n<p>我将永远记住闭包的方法是通过背包的类比。当一个函数被创建并传递或从另一个函数返回时，它会携带一个背包。背包中是函数声明时作用域内的所有变量。</p>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://blog.fundebug.com/2017/07/31/javascript-closure/\">解密JavaScript闭包</a></li>\n<li><a href=\"https://blog.fundebug.com/2017/07/17/10-javascript-difficulties/\">10个JavaScript难点</a></li>\n</ul>\n<h3>关于Fundebug</h3>\n<p><a href=\"https://www.fundebug.com/\">Fundebug</a>专注于JavaScript、微信小程序、微信小游戏、支付宝小程序、React Native、Node.js和Java线上应用实时BUG监控。 自从2016年双十一正式上线，Fundebug累计处理了10亿+错误事件，付费客户有Google、360、金山软件、百姓网等众多品牌企业。欢迎大家<a href=\"https://www.fundebug.com/team/create\">免费试用</a>！</p>\n<p><img src=\"https://static.fundebug.cn/wechat_slogan.png\" alt></p>\n</div>",
      "title": "我从来不理解JavaScript闭包，直到有人这样向我解释它...",
      "meta": {
        "likeNum": 0,
        "commentNum": 565,
      },
  "describe":"JavaScript闭包对我来说一直有点神秘,看过很多闭包的文章，在工作使用过闭包，有时甚至在...",
  "author_nickname": "八度空间",
  "avatar_url": "https://avatars0.githubusercontent.com/u/25942898?v=4&s=120",
  "author_id": "5cae9a3227fca00fb09d4fcd"
}
// const reg = new RegExp("<.+?>","g")
// const msg = blogData.content.replace(reg, '')
// const describe = msg.substring(0, 65)
// blogData.describe = describe

//console.log(blogData)
const blog = new BlogModel(blogData)



blog.save((err, docs) => {
  console.log(docs)
})


// 添加类别
// const blogCata = new BlogCataModel({
//   title: 'golang',
//   desc: 'Go语言相关技术合集'
// })

// blogCata.save((err, docs) => {
//   console.log(docs)
// })